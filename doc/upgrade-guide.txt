This file contains API changes between consecutive versions. You can get the
relevant information about all changes to the public Irrlicht API needed for
upgrading your code (esp. custom scene nodes and GUI elements) to a new Irrlicht
version. Since all changes are incremental you should skip forward to the
version you use right now and check all each note until you reach the desired
version.
Please note that the changes described here do not contain functional changes,
but only syntactical ones. Also, new methods are not documented here and
have to be looked up in the API documentation instead.

Basically, all changes have to be reflected in user code where used. Removed
and renamed methods are obviously not existant anymore. A hint is usually given
for such changes on how to remedy the situation.
Changed signatures of methods might go unnoticed. That need not be a bad thing,
e.g. for changes from s32 to u32 the parameters are usually automatically
converted by the compiler. However, one should be careful when writing custom
scene nodes or GUI elements. It might happen that the methods are not properly
chosen as candidates for virtual overloading. So always check that methods in
the user code have the proper signatures just as the interface versions. The
change hint will help to identify necessary changes.

Changes for Version 1.2
-----------------------
Removed compile flag (always used where available)
_IRR_LINUX_OPENGL_USE_EXTENSIONS_

IAnimatedMeshB3d:
Removed (no replacement available)
	virtual void AddMatrixToJoint(s32 jointNumber, core::matrix4* matrix) = 0;

IGUIElement.h
Changed signatures (made const)
	IGUIElement* getParent() const
	core::rect<s32> getRelativePosition() const

IGUITabControl.h
Changed signatures (const param)
	virtual IGUITab* addTab(const wchar_t* caption, s32 id=-1) = 0;

IImage.h
Changed signatures (made const)
	virtual ECOLOR_FORMAT getColorFormat() const = 0;

IParticleAffector.h
Changed inheritance (from irr:IUnknown)
	class IParticleAffector : public virtual io::IAttributeExchangingObject

IParticleEmitter.h
Changed inheritance (from irr:IUnknown)
	class IParticleEmitter : public virtual io::IAttributeExchangingObject

IParticleSystemSceneNode.h
Changed signatures (const param)
 	virtual IParticleEmitter* createPointEmitter(
		const core::vector3df& direction = core::vector3df(0.0f,0.03f,0.0f),
 		u32 minParticlesPerSecond = 5,
 		u32 maxParticlesPerSecond = 10,
 		video::SColor minStartColor = video::SColor(255,0,0,0),
 	virtual IParticleEmitter* createBoxEmitter(
 		const core::aabbox3df& box = core::aabbox3df(-10,28,-10,10,30,10),
 		const core::vector3df& direction = core::vector3df(0.0f,0.03f,0.0f),
 		u32 minParticlesPerSecond = 5,
 		u32 maxParticlesPerSecond = 10,
 		video::SColor minStartColor = video::SColor(255,0,0,0),

 	virtual IParticleAffector* createGravityAffector(
 		const core::vector3df& gravity = core::vector3df(0.0f,-0.03f,0.0f),
 		u32 timeForceLost = 1000) = 0;

ISceneManager.h
Changed signatures (additional param)
 	virtual ISceneNodeAnimator* createFlyCircleAnimator(const core::vector3df& center,
		f32 radius, f32 speed=0.001f, const core::vector3df& direction= core::vector3df ( 0.f, 1.f, 0.f ) ) = 0;

ITexture.h
Changed signatures (made const)
	virtual ECOLOR_FORMAT getColorFormat() const = 0;

IVideoDriver.h
Changed signatures (changed default param, use ECF_A1R5G5B5 explicitly for old behavior)
	virtual ITexture* addTexture(const core::dimension2d<s32>& size,
			const c8* name, ECOLOR_FORMAT format = ECF_A8R8G8B8) = 0;
Changed signatures (made const)
	virtual ITexture* createRenderTargetTexture(const core::dimension2d<s32>& size) = 0;

matrix4.h
Changed signatures (swapped parameter, it was (col, row) before although the names did not represent this)
	f32& operator()(s32 row, s32 col);
	const f32& operator()(s32 row, s32 col) const;

S3DVertex.h
Changed signatures (unconst param)
	S3DVertex(f32 x, f32 y, f32 z, f32 nx, f32 ny, f32 nz, SColor c, f32 tu, f32 tv);
 	S3DVertex(const core::vector3df& pos, const core::vector3df& normal,
		SColor color, const core::vector2d<f32>& tcoords);
	S3DVertex2TCoords(f32 x, f32 y, f32 z, SColor c, f32 tu, f32 tv, f32 tu2, f32 tv2);
	S3DVertex2TCoords(const core::vector3df& pos, SColor color,
 		const core::vector2d<f32>& tcoords, const core::vector2d<f32>& tcoords2);
	S3DVertex2TCoords(f32 x, f32 y, f32 z, f32 nx, f32 ny, f32 nz, SColor c, f32 tu, f32 tv);
 	S3DVertex2TCoords(const core::vector3df& pos, const core::vector3df& normal,
		SColor color, const core::vector2d<f32>& tcoords);
 	S3DVertexTangents(const core::vector3df& pos,
		const core::vector2df& tcoords,	SColor c);

SColor.h
Changed signatures (changed param types from signed to unsigned)
	inline u16 RGBA16(u32 r, u32 g, u32 b, u32 a);
	inline u16 RGB16(u32 r, u32 g, u32 b);
	inline u16 X8R8G8B8toA1R5G5B5(u32 color);
	inline u32 A1R5G5B5toA8R8G8B8(u32 color);
	inline u32 R5G6B5toA8R8G8B8(u16 color);
	inline u16 R5G6B5toA1R5G5B5(u16 color);
	inline u16 A1R5G5B5toR5G6B5(u16 color);
	inline u32 getAlpha(u16 color);
	inline u32 getRed(u16 color);
	inline u32 getGreen(u16 color);
	inline u32 getBlue(u16 color);
	inline u32 getLuminance(u16 color);
	inline SColor (u32 a, u32 r, u32 g, u32 b);
	inline SColor(u32 clr);
	inline u32 getAlpha() const
	inline u32 getRed() const
	inline u32 getGreen() const
	inline u32 getBlue() const
	inline void setAlpha(u32 a);
	inline void setRed(u32 r);
	inline void setGreen(u32 g);
	inline void setBlue(u32 b);
	inline u16 toA1R5G5B5() const
	inline void toOpenGLColor(u8* dest) const
	inline void set(u32 a, u32 r, u32 g, u32 b);
	inline void set(u32 col);
Changed signatures (const param)
	inline SColor getInterpolated(const SColor &other, f32 d) const
Changed public member (type changed)
	u32 color;


Changes for Version 1.3
-----------------------
Globally renamed Frustrum to Frustum in all signatures and code parts

IAnimatedMeshB3d.h
Renamed methods (small first letter)
	virtual void setInterpolationMode(s32 mode) = 0;
	virtual void setAnimateMode(s32 mode) = 0;

IAnimatedMeshSceneNode.h
changed signature (changed types)
	virtual void setAnimationSpeed(f32 framesPerSecond) = 0;

ICameraSceneNode.h
Renamed methods and changed signature (changed types, frustum renaming)
	virtual const SViewFrustum* getViewFrustum() const = 0;

IFileSystem.h
Renamed method (from addUnZipFileArchive)
	virtual bool addFolderFileArchive(const c8* filename, bool ignoreCase = true, bool ignorePaths = true) = 0;

IGUIContextMenu.h
Changed signature (added param)
 	virtual s32 addItem(const wchar_t* text, s32 commandId=-1, bool enabled=true,
			bool hasSubMenu=false, bool checked=false) = 0;

IGUIElement.h
Changed inheritance
	class IGUIElement : public virtual io::IAttributeExchangingObject, public IEventReceiver
Changed signature (made const)
	core::rect<s32> getAbsolutePosition() const

IGUIEnvironment.h
Changed signature (added param)
 	virtual IGUIButton* addButton(const core::rect<s32>& rectangle,
		IGUIElement* parent=0, s32 id=-1, const wchar_t* text=0, const wchar_t* tooltiptext = 0) = 0;

IGUIListBox.h
Removed method (Using sprite bank now)
	virtual void setIconFont(IGUIFont* font) = 0;
Change signature (changed types, due to sprite bank)
	virtual s32 addItem(const wchar_t* text, s32 icon) = 0;

IGUISkin.h
Changed inheritance
	class IGUISkin : public virtual io::IAttributeExchangingObject

IGUIToolbar.h
Changed signature (Added param for tooltips)
	virtual IGUIButton* addButton(s32 id=-1, const wchar_t* text=0, const wchar_t* tooltiptext=0,
		video::ITexture* img=0, video::ITexture* pressedimg=0,
		bool isPushButton=false, bool useAlphaChannel=false) = 0;

IImage.h
Changed signature (made const)
	virtual u32 getPitch() const = 0;

IImageWriter.h
Changed signature (additional param)
	virtual bool writeImage(io::IWriteFile *file, IImage *image, u32 param = 0) = 0;

IMeshBuffer.h
Changed signature (changed return type)
	virtual u32 getVertexCount() const = 0;
	virtual u32 getIndexCount() const = 0;
Removed method (use setBoundingBox instead)
	virtual core::aabbox3df& getBoundingBox() = 0;

IMesh.h
Changed signature (changed types, made const)
	virtual u32 getMeshBufferCount() const = 0;
	virtual IMeshBuffer* getMeshBuffer(u32 nr) const = 0;
Removed method (use setBoundingBox instead)
	virtual core::aabbox3d<f32>& getBoundingBox() = 0;

IReadFile.h
Changed signature (changed types)
	virtual s32 read(void* buffer, u32 sizeToRead) = 0;

irrArray.h
Changed signature (made const)
	s32 binary_search(const T& element, s32 left, s32 right) const

irrMath.h
Constant changed
	const f32 PI			= 3.14159265359f;
Constants removed (use RADTODEG64 or DEGTORAD64 instead)
	const f64 GRAD_PI		= 180.0 / PI64;
	const f64 GRAD_PI2		= PI64 / 180.0;
Changed signature (added tolerance parameter)
	inline bool equals(const f32 a, const f32 b, const f32 tolerance = ROUNDING_ERROR_32)

irrString.h
Changed signature (const param)
 	template <class B> string(const B* const c, u32 length);
 	template <class B> string(const B* const c);
 	template <class B> string<T>& operator=(const B* const c);
 	template <class B> string<T> operator+(const B* const c) const
	bool operator ==(const T* const str) const
	bool operator !=(const T* const str) const
	bool equalsn(const T* const str, int len) const
	void append(const T* const other);
	s32 findFirstChar(const T* const c, u32 count) const
 	template <class B> s32 findFirstCharNotInList(const B* const c, u32 count) const
 	template <class B> s32 findLastCharNotInList(const B* const c, u32 count) const
 	template <class B> s32 find(const B* const str) const
	void operator += (const T* const c);
Changed signature (changed type from signed)
	T& operator [](const u32 index) const
	u32 size() const
	void append(const string<T>& other, u32 length);
	void reserve(u32 count);
	s32 findNext(T c, u32 startPos) const
	string<T> subString(u32 begin, s32 length) const
	void erase(u32 index);
	void reallocate(u32 new_size);
Changed signature (added param)
	s32 findLast(T c, s32 start = -1) const

ISceneManager.h
Changed signature (changed default param from 128 minimalPolysPerNode)
 	virtual ISceneNode* addOctTreeSceneNode(IAnimatedMesh* mesh, ISceneNode* parent=0,
		s32 id=-1, s32 minimalPolysPerNode=256, bool alsoAddIfMeshPointerZero=false) = 0;
 	virtual ISceneNode* addOctTreeSceneNode(IMesh* mesh, ISceneNode* parent=0,
		s32 id=-1, s32 minimalPolysPerNode=256, bool alsoAddIfMeshPointerZero=false) = 0;
Changed signature (added param)
	virtual ICameraSceneNode* addCameraSceneNodeFPS(ISceneNode* parent = 0,
		f32 rotateSpeed = 100.0f, f32 moveSpeed = 500.0f, s32 id=-1,
		SKeyMap* keyMapArray=0, s32 keyMapSize=0, bool noVerticalMovement=false,
		f32 jumpSpeed = 0.f) = 0;

	virtual IBillboardSceneNode* addBillboardSceneNode(ISceneNode* parent = 0,
		const core::dimension2d<f32>& size = core::dimension2d<f32>(10.0f, 10.0f),
		const core::vector3df& position = core::vector3df(0,0,0), s32 id=-1,
		video::SColor shade_top = 0xFFFFFFFF, video::SColor shade_down = 0xFFFFFFFF) = 0;

	virtual ITerrainSceneNode* addTerrainSceneNode(
		const c8* heightMapFileName,
		ISceneNode* parent=0, s32 id=-1,
		const core::vector3df& position = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& rotation = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& scale = core::vector3df(1.0f,1.0f,1.0f),
		video::SColor vertexColor = video::SColor(255,255,255,255),
		s32 maxLOD=5, E_TERRAIN_PATCH_SIZE patchSize=ETPS_17, s32 smoothFactor=0) = 0;

	virtual ITerrainSceneNode* addTerrainSceneNode(
		io::IReadFile* heightMapFile,
		ISceneNode* parent=0, s32 id=-1,
		const core::vector3df& position = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& rotation = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& scale = core::vector3df(1.0f,1.0f,1.0f),
		video::SColor vertexColor = video::SColor(255,255,255,255),
		s32 maxLOD=5, E_TERRAIN_PATCH_SIZE patchSize=ETPS_17, s32 smoothFactor=0) = 0;
Changed signature (changed return type)
	virtual u32 registerNodeForRendering(ISceneNode* node,
		E_SCENE_NODE_RENDER_PASS pass = ESNRP_AUTOMATIC) = 0;

ISceneNodeAnimatorCollisionResponse.h
Changed signature (made const)
	virtual void setEllipsoidTranslation(const core::vector3df &translation) = 0;

ISceneNode.h
Renamed method (from OnPreRender)
	virtual void OnRegisterSceneNode();
Renamed method (from OnPostRender)
	virtual void OnAnimate(u32 timeMs);
Changed signature (made const)
	virtual const core::aabbox3d<f32> getTransformedBoundingBox() const
	const core::matrix4& getAbsoluteTransformation() const
	virtual bool isVisible() const
	virtual s32 getID() const
	scene::ISceneNode* getParent() const
	virtual ESCENE_NODE_TYPE getType() const
Changed signature (changed type)
	virtual video::SMaterial& getMaterial(u32 num);
	void setMaterialTexture(u32 textureLayer, video::ITexture* texture);
	void setAutomaticCulling( E_CULLING_TYPE state);
	virtual void setDebugDataVisible(E_DEBUG_SCENE_TYPE visible);
Changed signature (changed return type)
	virtual u32 getMaterialCount();
	virtual const core::vector3df& getRotation() const
	E_CULLING_TYPE getAutomaticCulling() const
Changed signature (changed return type, made const)
	E_DEBUG_SCENE_TYPE isDebugDataVisible() const

ITerrainSceneNode.h
Changed signature (changed return type)
	virtual u32 getIndexCount() = 0;

ITexture.h
Changed signature (changed return type, made const)
	virtual u32 getPitch() const = 0;
Removed method (Available in SMaterial now)
	core::matrix4& getTransformation();

IVideoDriver.h
Changed signature (changed types)
	virtual ITexture* getTextureByIndex(u32 index) = 0;
	virtual void drawVertexPrimitiveList(const void* vertices, u32 vertexCount, const u16* indexList, u32 triangleCount, E_VERTEX_TYPE vType, scene::E_PRIMITIVE_TYPE pType) = 0;
 	virtual void drawIndexedTriangleList(const S3DVertex* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount) = 0;
	virtual void drawIndexedTriangleList(const S3DVertex2TCoords* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount) = 0;
	virtual void drawIndexedTriangleList(const S3DVertexTangents* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount) = 0;
	virtual void drawIndexedTriangleFan(const S3DVertex* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount) = 0;
	virtual void drawIndexedTriangleFan(const S3DVertex2TCoords* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount) = 0;
	virtual const SLight& getDynamicLight(u32 idx) = 0;
	virtual IMaterialRenderer* getMaterialRenderer(u32 idx) = 0;
	virtual const c8* getMaterialRendererName(u32 idx) = 0;
Changed signature (const param)
	virtual void drawMeshBuffer( const scene::IMeshBuffer* mb) = 0;
	virtual io::IAttributes* createAttributesFromMaterial(const video::SMaterial& material) = 0;
Changed signature (added param)
	virtual u32 getPrimitiveCountDrawn( u32 param = 0 ) = 0;
	virtual bool writeImageToFile(IImage* image, const c8* filename, u32 param = 0) = 0;
	virtual IImage* createImageFromData(ECOLOR_FORMAT format,
		const core::dimension2d<s32>& size, void *data,
		bool ownForeignMemory=false,
		bool deleteMemory = true) = 0;
Changed signature (changed return types)
	virtual u32 getMaximalDynamicLightAmount() = 0;
	virtual u32 getDynamicLightCount() = 0;
	virtual u32 getMaximalPrimitiveCount() = 0;
	virtual u32 getMaterialRendererCount() = 0;

matrix4.h
Changed signature (added param)
	matrix4( eConstructor constructor = EM4CONST_IDENTITY );
Changed signature (const param)	
	f32& operator()(const s32 row, const s32 col);
	const f32& operator()(const s32 row, const s32 col) const
Changed signature (param order)	
	void transformVect( vector3df& out, const vector3df& in ) const;

quaternion.h
Changed signature (changed return type)
	void slerp( quaternion q1, const quaternion q2, f32 interpolate );

SColor.h
Renamed method (from getLuminance), changed types
	inline s32 getAverage(s16 color);
Changed signature (changed return types)
	inline f32 getLuminance() const
Changed signature (const param)
	inline SColorf getInterpolated(const SColorf &other, f32 d) const

SMaterial.h
Constant type changed
	const u32 MATERIAL_MAX_TEXTURES = 4;
Type changed
	class SMaterial
Public members removed (use Textures[] instead)
	ITexture* Texture1;
	ITexture* Texture2;
	ITexture* Texture3;
	ITexture* Texture4;
Public members removed (use setFlag()/getFlag() instead)
	Flags[]
Public members changed (type changed)
	u32 ZBuffer;
Changed signature (made const)
	inline bool operator!=(const SMaterial& b) const

SMeshBuffer.h
Changed signature (changed param)
	virtual u32 getVertexCount() const
	virtual u32 getIndexCount() const
Removed method (use setBoundingBox instead)
	virtual core::aabbox3d<f32>& getBoundingBox();

SMeshBufferLightMap.h
Changed signature (changed param)
	virtual u32 getVertexCount() const
	virtual u32 getIndexCount() const
Removed method (use setBoundingBox instead)
	virtual core::aabbox3d<f32>& getBoundingBox();

SMeshBufferTangents.h
Changed signature (changed param)
	virtual u32 getVertexCount() const
	virtual u32 getIndexCount() const
Removed method (use setBoundingBox instead)
	virtual core::aabbox3d<f32>& getBoundingBox();

SMesh.h
Changed signature (changed param, made const)
	virtual u32 getMeshBufferCount() const
	virtual IMeshBuffer* getMeshBuffer(u32 nr) const
Removed method (use setBoundingBox instead);
	virtual core::aabbox3d<f32>& getBoundingBox();

vector3d.h
Changed signature (changed return type)
	T getLength() const
Changed signature (changed type)
	vector3d<T> getInterpolated(const vector3d<T>& other, const T d) const

Changes for Version 1.3.1
-------------------------
Changed types:
	SMeshBuffer* types are now template typedefs from CMeshBuffer

dimension2d.h
Changed signature (const param)
	dimension2d(const T& width, const T& height);
	dimension2d<T> operator/(const T& scale);
	dimension2d<T> operator*(const T& scale);

IAnimatedMeshSceneNode.h
Changed signature (made const)
	virtual s32 getFrameNr() const = 0;
	virtual s32 getStartFrame() const = 0;
	virtual s32 getEndFrame() const = 0;
Renamed method (from getAbsoluteTransformation)
	virtual const SMD3QuaterionTag& getMD3TagTransformation( const core::stringc & tagname) = 0;

IGUIButton.h
Renamed method (from getUseAlphaChannel)
	virtual bool isAlphaChannelUsed() = 0;

IGUIElementFactory.h
Changed signature (made const)
	EGUI_ELEMENT_TYPE getType() const
	virtual const c8* getTypeName() const

IGUIEnvironment.h
Changed signature (added param)
	virtual bool saveGUI(const c8* filename, IGUIElement* start=0) = 0;
	virtual bool saveGUI(io::IWriteFile* file, IGUIElement* start=0) = 0;
	virtual bool loadGUI(const c8* filename, IGUIElement* parent=0) = 0;
	virtual bool loadGUI(io::IReadFile* file, IGUIElement* parent=0) = 0;

IGUIFontBitmap.h
Changed signature (made const)
	virtual EGUI_FONT_TYPE getType() const { return EGFT_BITMAP; }

IGUIFont.h
Changed signature (made const)
	virtual EGUI_FONT_TYPE getType() const { return EGFT_CUSTOM; }

IGUISkin.h
Changed signature (added param)
	virtual IGUIFont* getFont(EGUI_DEFAULT_FONT which=EGDF_DEFAULT) = 0;
	virtual void setFont(IGUIFont* font, EGUI_DEFAULT_FONT which=EGDF_DEFAULT) = 0;
Changed signature (made const)
	virtual EGUI_SKIN_TYPE getType() const { return EGST_UNKNOWN; };

IImage.h
Changed signature (made const)
	virtual const core::dimension2d<s32>& getDimension() const = 0;
	virtual u32 getRedMask() const = 0;
	virtual u32 getGreenMask() const = 0;
	virtual u32 getBlueMask() const = 0;
	virtual u32 getAlphaMask() const = 0;
Changed signature (changed return type, made const)
	virtual u32 getBitsPerPixel() const = 0;
	virtual u32 getBytesPerPixel() const = 0;
	virtual u32 getImageDataSizeInBytes() const = 0;
	virtual u32 getImageDataSizeInPixels() const = 0;
Changed signature (changed param type, made const)
	virtual SColor getPixel(u32 x, u32 y) const = 0;

IMeshCache.h
Changed signature (const param)
	virtual void removeMesh(const IAnimatedMesh* const mesh) = 0;
Changed signature (const param, made const)
	virtual s32 getMeshIndex(const IAnimatedMesh* const mesh) const = 0;
	virtual const c8* getMeshFilename(const IAnimatedMesh* const mesh) const = 0;
	virtual const c8* getMeshFilename(const IMesh* const mesh) const = 0;
Changed signature (changed return type, made const)
	virtual u32 getMeshCount() const = 0;
Changed signature (changed param type)
	virtual IAnimatedMesh* getMeshByIndex(u32 index) = 0;
Changed signature (made const)
	virtual const c8* getMeshFilename(u32 index) const = 0;

IParticleAffector.h
Changed signature (made const)
	virtual E_PARTICLE_AFFECTOR_TYPE getType() const = 0;

IParticleEmitter.h
Changed signature (made const)
	virtual E_PARTICLE_EMITTER_TYPE getType() const = 0;

irrString.h
Changed signature (const param)
	string(const double number);
Changed signature (changed return type)
	string<T>& operator += (T c);
	string<T>& operator += (const string<T>& other);
Changed signature (changed return type, const param)
	string<T>& operator += (const T* const c);
	string<T>& operator += (const int i);
	string<T>& operator += (const double i);

ISceneManager.h
Changed signature (added param)
	virtual ITerrainSceneNode* addTerrainSceneNode(
		const c8* heightMapFileName,
		ISceneNode* parent=0, s32 id=-1,
		const core::vector3df& position = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& rotation = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& scale = core::vector3df(1.0f,1.0f,1.0f),
		video::SColor vertexColor = video::SColor(255,255,255,255),
		s32 maxLOD=5, E_TERRAIN_PATCH_SIZE patchSize=ETPS_17, s32 smoothFactor=0,
		bool addAlsoIfHeightmapEmpty = false) = 0;
	virtual ITerrainSceneNode* addTerrainSceneNode(
		io::IReadFile* heightMapFile,
		ISceneNode* parent=0, s32 id=-1,
		const core::vector3df& position = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& rotation = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& scale = core::vector3df(1.0f,1.0f,1.0f),
		video::SColor vertexColor = video::SColor(255,255,255,255),
		s32 maxLOD=5, E_TERRAIN_PATCH_SIZE patchSize=ETPS_17, s32 smoothFactor=0,
		bool addAlsoIfHeightmapEmpty = false) = 0;
	virtual ISceneManager* createNewSceneManager(bool cloneContent=false) = 0;

ISceneNodeAnimator.h
Changed signature (made const)
	virtual ESCENE_NODE_ANIMATOR_TYPE getType() const

ITexture.h
Changed signature (made const)
	virtual bool hasMipMaps() const

IVideoDriver.h
Changed signature (reference param)
	virtual void draw3DBox(const core::aabbox3d<f32>& box,
		SColor color = SColor(255,255,255,255)) = 0;
Changed signature (added defaults for param)
	virtual void draw2DImage(video::ITexture* texture,
			const core::position2d<s32>& pos,
			const core::array<core::rect<s32> >& sourceRects,
			const core::array<s32>& indices,
			s32 kerningWidth=0,
			const core::rect<s32>* clipRect=0,
			SColor color=SColor(255,255,255,255),
			bool useAlphaChannelOfTexture=false) = 0;
Changed signature (changed return type)
	virtual const SExposedVideoData& getExposedVideoData() = 0;

line3d.h
Changed signature (changed return type)
	T getLength() const

matrix4.h
Changed type to template class
	template <class T> class CMatrix4
	typedef CMatrix4<f32> matrix4;
Changed signature (changed return type)
	T& operator()(const s32 row, const s32 col);
	const T& operator()(const s32 row, const s32 col) const
	T& operator[](u32 index);
	const T& operator[](u32 index) const
Changed signature (changed param type)
	inline CMatrix4<T>& operator=(const T& scalar);
	const T* pointer() const
	T* pointer();
	CMatrix4<T> operator*(const T& scalar) const;
	CMatrix4<T>& operator*=(const T& scalar);
	void transformVect(T *out,const core::vector3df &in) const;
	void rotateVect(T *out,const core::vector3df &in) const;
	void multiplyWith1x4Matrix(T* matrix) const;
	CMatrix4<T> interpolate(const core::CMatrix4<T>& b, f32 time) const;

plane3d.h
Renamed method (from existsInterSection)
	bool existsIntersection(const plane3d<T>& other) const

quaternion.h
Changed signature (unconst param)
	void slerp( quaternion q1, quaternion q2, f32 interpolate );

SExposedVideoData.h
Removed public member (replaced by X11Display and X11Window)
 	OpenGLLinux.Window;

SIrrCreationParameters.h
Changed public member (changed type for 64bit system support)
	void* WindowId;

triangle3d.h
Changed method to private
	bool isOnSameSide(const vector3d<T>& p1, const vector3d<T>& p2,
		const vector3d<T>& a, const vector3d<T>& b) const

vector2d.h
Changed signature (changed return value)
	T getLength() const
	T getDistanceFrom(const vector2d<T>& other) const

vector3d.h
Changed signature (changed return value)
	T getDistanceFrom(const vector3d<T>& other) const

Changes for Version 1.4
-----------------------
This release had many changes in API method signatures. Many methods have been
made const, also several parameter types were changed. The two most noticeable
changes (which almost every user of the Irrlicht API will come across) are the
renaming of IUnknown to IReferenceCounted and const-ref change of the SEvent
structure of the OnEvent method. Another important change: DirectX8 support is
now by default disabled, enable the define in IrrCompileConfig.h to restore the
old behavior.

IReferenceCounted.h
Renamed Type (from IUnknown). This changed most classes in Irrlicht
	class IReferenceCounted

IEventReceiver.h
Changed signature (made const)
	virtual bool OnEvent(const SEvent& event) = 0;

IrrCompileConfig.h
DirectX8 support is now by default disabled

CMeshBuffer.h
Removed method
	virtual u32 getVertexPitch() const

fast_atof.h
Changed signature to allow optional second parameter
	u32 strtol10(const char* in, const char** out=0)

IAnimatedMesh.h
Changed inheritance (instead of IReferenceCounted)
	class IAnimatedMesh : public IMesh
Changed signature (made const)
	virtual u32 getFrameCount() const = 0;

IAnimatedMeshSceneNode.h
Changed signature (changed param type)
	virtual void setCurrentFrame(f32 frame) = 0;
Replaced methods (generalized method getJointNode available)
	virtual ISceneNode* getMS3DJointNode(const c8* jointName) = 0;
	virtual ISceneNode* getXJointNode(const c8* jointName) = 0;
	virtual ISceneNode* getB3DJointNode(const c8* jointName) = 0;
Changed signature (changed return type)
	virtual f32 getFrameNr() const = 0;
Changed signature (made const)
	virtual bool isReadOnlyMaterials() const = 0;

IAttributeExchangingObject.h
Changed signature (made const)
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const {}

IAttributes.h
Changed signature (made const, changed param type)
	virtual u32 getAttributeCount() const = 0;
Changed signature (added param)
	virtual bool read(io::IXMLReader* reader, bool readCurrentElementOnly=false, const wchar_t* elementName=0) = 0;
	virtual bool write(io::IXMLWriter* writer, bool writeXMLHeader=false, const wchar_t* elementName=0) = 0;
Changed signature (made const-ref param)
	virtual void addMatrix(const c8* attributeName, const core::matrix4& v) = 0;
	virtual void setAttribute(const c8* attributeName, const core::matrix4& v) = 0;
	virtual void setAttribute(s32 index, const core::matrix4& v) = 0;

IBillboardSceneNode.h
Changed signature (made const)
	virtual const core::dimension2d<f32>& getSize() const = 0;
	virtual void getColor(video::SColor & topColor, video::SColor & bottomColor) const = 0;

ICameraSceneNode.h
Changed signature (made const)
	virtual const core::matrix4& getProjectionMatrix() const = 0;
	virtual const core::matrix4& getViewMatrix() const = 0;
	virtual bool OnEvent(const SEvent& event) = 0;
	virtual f32 getNearValue() const = 0;
	virtual f32 getFarValue() const = 0;
	virtual f32 getAspectRatio() const = 0;
	virtual f32 getFOV() const = 0;
	virtual bool isInputReceiverEnabled() const = 0;
	virtual bool isOrthogonal() const 

ICursorControl.h
Changed signature (made const)
		virtual bool isVisible() const = 0;

IFileList.h
Changed signature (made const, changed param or return types)
	virtual u32 getFileCount() const = 0;
	virtual const c8* getFileName(u32 index) const = 0;
	virtual const c8* getFullFileName(u32 index) = 0;
	virtual bool isDirectory(u32 index) const = 0;

IFileSystem.h	2007-09-17 09:53:10.000000000 +0200
Changed signature (made const method and const-ref param)
	virtual core::stringc getAbsolutePath(const core::stringc& filename) const = 0;
	virtual core::stringc getFileDir(const core::stringc& filename) const = 0;
Changed signature (made const)
	virtual IFileList* createFileList() const = 0;
	virtual bool existFile(const c8* filename) const = 0;

IGUIButton.h
Changed signature (made const)
	virtual bool isPressed() const = 0;
	virtual bool isAlphaChannelUsed() const = 0;
	virtual bool isPushButton() const = 0;
	virtual bool isDrawingBorder() const = 0;

IGUICheckBox.h
Changed signature (made const)
	virtual bool isChecked() const = 0;

IGUIComboBox.h
Changed signature (made const, changed param or return types)
	virtual u32 getItemCount() const = 0;
	virtual const wchar_t* getItem(u32 idx) const = 0;
	virtual s32 getSelected() const = 0;
Changed signature (changed param or return types)
	virtual u32 addItem(const wchar_t* text) = 0;
	virtual void removeItem(u32 id) = 0;

IGUIContextMenu.h
Changed signature (changed param or return types)
	virtual u32 getItemCount() const = 0;
	virtual u32 addItem(const wchar_t* text, s32 commandId=-1, bool enabled=true, bool hasSubMenu=false, bool checked=false) = 0;
	virtual void setItemText(u32 idx, const wchar_t* text) = 0;
	virtual void setItemEnabled(u32 idx, bool enabled) = 0;
	virtual void setItemChecked(u32 idx, bool enabled) = 0;
	virtual void removeItem(u32 idx) = 0;
	virtual void setItemCommandId(u32 idx, s32 id) = 0;
Changed signature (made const, changed param or return types)
	virtual const wchar_t* getItemText(u32 idx) const = 0;
	virtual bool isItemEnabled(u32 idx) const = 0;
	virtual bool isItemChecked(u32 idx) const = 0;
	virtual s32 getSelectedItem() const = 0;
	virtual s32 getItemCommandId(u32 idx) const = 0;
	virtual IGUIContextMenu* getSubMenu(u32 idx) const = 0;

IGUIEditBox.h
Changed signature (changed param or return types)
	virtual void setMax(u32 max) = 0;
Changed signature (made const, changed param or return types)
	virtual u32 getMax() const = 0;

IGUIElementFactory.h
Changed signature (made const)
	virtual s32 getCreatableGUIElementTypeCount() const = 0;
	virtual EGUI_ELEMENT_TYPE getCreateableGUIElementType(s32 idx) const = 0;
	virtual const c8* getCreateableGUIElementTypeName(s32 idx) const = 0;
	virtual const c8* getCreateableGUIElementTypeName(EGUI_ELEMENT_TYPE type) const = 0;

IGUIElement.h
Changed signature (made const)
	bool isNotClipped() const
	virtual bool isVisible() const
	virtual bool isSubElement() const
	virtual bool isEnabled() const
	virtual const wchar_t* getText() const
	virtual s32 getID() const
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const
Changed signature (made const-ref param or return type)
	virtual const core::stringw& getToolTipText() const
	virtual bool OnEvent(const SEvent& event)

IGUIEnvironment.h
Changed signature (changed return type)
	virtual bool setFocus(IGUIElement* element) = 0;
	virtual bool removeFocus(IGUIElement* element) = 0;
Changed signature (made const)
	virtual IGUIElement* getFocus() const = 0;
	virtual bool hasFocus(IGUIElement* element) const = 0;
	virtual video::IVideoDriver* getVideoDriver() const = 0;
	virtual io::IFileSystem* getFileSystem() const = 0;
	virtual IOSOperator* getOSOperator() const = 0;
	virtual IGUISkin* getSkin() const = 0;
	virtual IGUIFont* getBuiltInFont() const = 0;
	virtual IGUIElementFactory* getDefaultGUIElementFactory() const = 0;
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const =0;
Changed signature (made const-ref param or return type)
	virtual bool postEventFromUser(const SEvent& event) = 0;
Changed signature (made const, changed param or return types)
	virtual u32 getRegisteredGUIElementFactoryCount() const = 0;
	virtual IGUIElementFactory* getGUIElementFactory(u32 index) const = 0;

IGUIFileOpenDialog.h
Changed signature (made const)
	virtual const wchar_t* getFileName() const = 0;

IGUIFontBitmap.h
Changed signature (made const)
	virtual IGUISpriteBank* getSpriteBank() const = 0;
	virtual u32 getSpriteNoFromChar(const wchar_t *c) const = 0;
	virtual s32 getKerningWidth(const wchar_t* thisLetter=0, const wchar_t* previousLetter=0) const = 0;

IGUIFont.h
Changed signature (made const)
	virtual core::dimension2d<s32> getDimension(const wchar_t* text) const = 0;
	virtual s32 getCharacterFromPos(const wchar_t* text, s32 pixel_x) const = 0;
	virtual s32 getKerningWidth(const wchar_t* thisLetter=0, const wchar_t* previousLetter=0) const = 0;
	virtual s32 getKerningHeight() const = 0;

IGUIListBox.h
Changed signature (made const, changed param or return types)
	virtual u32 getItemCount() const = 0;
	virtual const wchar_t* getListItem(u32 id) const = 0;
	virtual s32 getIcon(u32 index) const = 0;
Changed signature (changed param or return types)
	virtual u32 addItem(const wchar_t* text) = 0;
	virtual u32 addItem(const wchar_t* text, s32 icon) = 0;
	virtual void removeItem(u32 index) = 0;
Changed signature (made const)
	virtual s32 getSelected() const = 0;

IGUIMeshViewer.h
Changed signature (made const)
		virtual const video::SMaterial& getMaterial() const = 0;

IGUIScrollBar.h
Changed signature (made const)
	virtual s32 getMax() const = 0;
	virtual s32 getSmallStep() const = 0;
	virtual s32 getPos() const = 0;

IGUISkin.h
Changed signature (made const)
	virtual video::SColor getColor(EGUI_DEFAULT_COLOR color) const = 0;
	virtual s32 getSize(EGUI_DEFAULT_SIZE size) const = 0;
	virtual const wchar_t* getDefaultText(EGUI_DEFAULT_TEXT text) const = 0;
	virtual IGUIFont* getFont(EGUI_DEFAULT_FONT which=EGDF_DEFAULT) const = 0;
	virtual IGUISpriteBank* getSpriteBank() const = 0;
	virtual u32 getIcon(EGUI_DEFAULT_ICON icon) const = 0;

IGUISpriteBank.h
Changed signature (made const)
	virtual u32 getTextureCount() const = 0;
	virtual video::ITexture* getTexture(u32 index) const = 0;

IGUIStaticText.h
Changed signature (made const)
	virtual IGUIFont* getOverrideFont(void) const = 0;
	virtual video::SColor const& getOverrideColor(void) const = 0;
	virtual bool isOverrideColorEnabled(void) const = 0;
	virtual bool isWordWrapEnabled(void) const = 0;
	virtual s32 getTextHeight() const = 0;
	virtual s32 getTextWidth(void) const = 0;

IGUITabControl.h
Changed signature (made const)
	virtual s32 getNumber() const = 0;
	virtual s32 getTabCount() const = 0;
	virtual IGUITab* getTab(s32 idx) const = 0;
	virtual s32 getActiveTab() const = 0;

IGUIWindow.h
Changed signature (made const)
	virtual IGUIButton* getCloseButton() const = 0;
	virtual IGUIButton* getMinimizeButton() const = 0;
	virtual IGUIButton* getMaximizeButton() const = 0;

IImageLoader.h
Changed signature (made const)
	virtual bool isALoadableFileExtension(const c8* fileName) const = 0;
	virtual bool isALoadableFileFormat(io::IReadFile* file) const = 0;
	virtual IImage* loadImage(io::IReadFile* file) const = 0;

IImageWriter.h
Changed signature (made const)
	virtual bool isAWriteableFileExtension(const c8* fileName) const = 0;
	virtual bool writeImage(io::IWriteFile *file, IImage *image, u32 param = 0) const = 0;

ILogger.h
Changed signature (made const)
	virtual ELOG_LEVEL getLogLevel() const = 0;

IMaterialRenderer.h
Changed signature (made const-ref param)
	virtual void OnSetMaterial(const SMaterial& material, const SMaterial& lastMaterial, bool resetAllRenderstates, IMaterialRendererServices* services) {};
Changed signature (made const)
	virtual bool isTransparent() const { return false; }
	virtual s32 getRenderCapability() const { return 0; }

IMesh.h
Changed signature (made const)
		virtual IMeshBuffer* getMeshBuffer( const video::SMaterial &material) const = 0;

IMeshLoader.h
Changed signature (made const)
	virtual bool isALoadableFileExtension(const c8* fileName) const = 0;

IMeshManipulator.h
Removed method (now in IMeshBuffer)
	virtual void recalculateBoundingBox(scene::IMeshBuffer* buffer) const

IMeshSceneNode.h
Changed signature (made const)
	virtual bool isReadOnlyMaterials() const = 0;

IOSOperator.h
Changed signature (made const)
	virtual const wchar_t* getOperationSystemVersion() const = 0;
	virtual void copyToClipboard(const c8* text) const = 0;
	virtual c8* getTextFromClipboard() const = 0;	
	virtual bool getProcessorSpeedMHz(u32* MHz) const = 0;
	virtual bool getSystemMemory(u32* Total, u32* Avail) const = 0;

IParticleAffector.h
Changed signature (made const)
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const {}

IParticleEmitter.h
Changed signature (made const)
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const {}

IParticleSystemSceneNode.h
Changed signature (changed return type, changed param types)
	virtual IParticlePointEmitter* createPointEmitter(
 		const core::vector3df& direction = core::vector3df(0.0f,0.03f,0.0f), 
 		u32 minParticlesPerSecond = 5,
 		u32 maxParticlesPerSecond = 10,
		const video::SColor& minStartColor = video::SColor(255,0,0,0),
		const video::SColor& maxStartColor = video::SColor(255,255,255,255),
 		u32 lifeTimeMin=2000, u32 lifeTimeMax=4000,
 		s32 maxAngleDegrees=0) = 0;
	virtual IParticleEmitter* createBoxEmitter(
 		const core::aabbox3df& box = core::aabbox3df(-10,28,-10,10,30,10),
 		const core::vector3df& direction = core::vector3df(0.0f,0.03f,0.0f), 
 		u32 minParticlesPerSecond = 5,
 		u32 maxParticlesPerSecond = 10,
		const video::SColor& minStartColor = video::SColor(255,0,0,0),
		const video::SColor& maxStartColor = video::SColor(255,255,255,255),
 		u32 lifeTimeMin=2000, u32 lifeTimeMax=4000,
 		s32 maxAngleDegrees=0) = 0;
	virtual IParticleFadeOutAffector* createFadeOutParticleAffector(
		const video::SColor& targetColor = video::SColor(0,0,0,0),
 		u32 timeNeededToFadeOut = 1000) = 0;
	virtual IParticleGravityAffector* createGravityAffector(
 		const core::vector3df& gravity = core::vector3df(0.0f,-0.03f,0.0f),
 		u32 timeForceLost = 1000) = 0;

IQ3Shader.h
Removed method
	bool operator < ( const SVariable &other ) const

IReadFile.h
Changed param types (adapt the correct C-API for file positions)
	virtual bool seek(long finalPos, bool relativeMovement = false) = 0;
	virtual long getSize() const = 0;
	virtual long getPos() const = 0;
	IReadFile* createLimitReadFile(const c8* fileName, IReadFile* alreadyOpenedFile, long areaSize);
	IReadFile* createMemoryReadFile(void* memory, long size, const c8* fileName, bool deleteMemoryWhenDropped);
Changed signature (made const)
	virtual const c8* getFileName() const = 0;

IrrlichtDevice.h
Changed signature (made const)
	virtual bool isWindowActive() const = 0;
	virtual const c8* getVersion() const = 0;
Changed signature (made const-ref param)
	virtual void postEventFromUser(const SEvent& event) = 0;

irrList.h
Changed some structures in order to incorporate a ConstIterator class.
	Iterator begin()
	ConstIterator begin() const
	Iterator end()
	ConstIterator end() const
	Iterator getLast()
	ConstIterator getLast() const
	void insert_after(const Iterator& it, const T& element)
	void insert_before(const Iterator& it, const T& element)

irrMath.h
Changed signature (Use const references for better class handling)
	inline const T& min_(const T& a, const T& b)
	inline const T& min_(const T& a, const T& b, const T& c)
	inline const T& max_(const T& a, const T& b)
	inline const T& max_(const T& a, const T& b, const T& c)
	inline T abs_(const T& a)
	inline T lerp(const T& a, const T& b, const f32 t)
	inline const T clamp (const T& value, const T& low, const T& high) 

irrString.h
Changed signature (made proper const method)
	T& operator [](const u32 index)
	const T& operator [](const u32 index) const

irrXML.h
Changed signature (adapt the correct C-API for file positions, made const)
	virtual long getSize() const = 0;
Changed signature (changed param types)
	virtual unsigned int getAttributeCount() const = 0;

ISceneManager.h
Changed signature (changed param types)
	virtual IAnimatedMesh* addHillPlaneMesh(const c8* name,
		const core::dimension2d<f32>& tileSize, const core::dimension2d<u32>& tileCount,
		video::SMaterial* material = 0,	f32 hillHeight = 0.0f,
		const core::dimension2d<f32>& countHills = core::dimension2d<f32>(0.0f, 0.0f),
		const core::dimension2d<f32>& textureRepeatCount = core::dimension2d<f32>(1.0f, 1.0f)) = 0;
Changed signature (changed param types and order)
	virtual IAnimatedMesh* addArrowMesh(const c8* name,
			video::SColor vtxColor0=0xFFFFFFFF,
			video::SColor vtxColor1=0xFFFFFFFF,
			u32 tesselationCylinder=4, u32 tesselationCone=8,
			f32 height=1.f, f32 cylinderHeight=0.6f,
			f32 width0=0.05f, f32 width1=0.3f) = 0;
Changed signature (changed param types)
	virtual bool postEventFromUser(const SEvent& event) = 0;
	virtual ISceneNodeFactory* getSceneNodeFactory(u32 index) = 0;
	virtual ISceneNodeAnimatorFactory* getSceneNodeAnimatorFactory(u32 index) = 0;
Changed signature (made const)
	virtual E_SCENE_NODE_RENDER_PASS getSceneNodeRenderPass() const = 0;
Changed signature (changed param types, made const)
	virtual u32 getRegisteredSceneNodeFactoryCount() const = 0;
	virtual u32 getRegisteredSceneNodeAnimatorFactoryCount() const = 0;
	virtual const video::SColorf& getAmbientLight() const = 0;

ISceneNodeAnimatorCollisionResponse.h
Changed signature (made const)
	virtual bool isFalling() const = 0;

ISceneNodeAnimatorFactory.h
Changed signature (changed param types, made const)
	virtual u32 getCreatableSceneNodeAnimatorTypeCount() const = 0;
	virtual ESCENE_NODE_ANIMATOR_TYPE getCreateableSceneNodeAnimatorType(u32 idx) const = 0;
	virtual const c8* getCreateableSceneNodeAnimatorTypeName(u32 idx) const = 0;
Changed signature (made const)
	virtual const c8* getCreateableSceneNodeAnimatorTypeName(ESCENE_NODE_ANIMATOR_TYPE type) const = 0;

ISceneNodeFactory.h
Changed signature (changed param types, made const)
	virtual u32 getCreatableSceneNodeTypeCount() const = 0;
	virtual ESCENE_NODE_TYPE getCreateableSceneNodeType(u32 idx) const = 0;
	virtual const c8* getCreateableSceneNodeTypeName(u32 idx) const = 0;
Changed signature (made const)
	virtual const c8* getCreateableSceneNodeTypeName(ESCENE_NODE_TYPE type) const = 0;

ISceneNode.h
Changed signature (made const)
	virtual u32 getMaterialCount() const
	bool isDebugObject() const
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const

IShadowVolumeSceneNode.h
Changed signature (made const param)
	virtual void setMeshToRenderFrom(const IMesh* mesh) = 0;

ITerrainSceneNode.h
Changed signature (made const)
	virtual u32 getIndexCount() const = 0;
	virtual void getMeshBufferForLOD(SMeshBufferLightMap& mb, s32 LOD) const = 0;
	virtual s32 getCurrentLODOfPatches(core::array<s32>& LODs) const = 0;
	virtual f32 getHeight( f32 x, f32 y ) const = 0;
Changed signature (made const, made const-ref param)
	virtual const core::vector3df& getTerrainCenter() const = 0;

ITexture.h
Changed signature (made const)
	virtual const core::dimension2d<s32>& getOriginalSize() const = 0;
	virtual const core::dimension2d<s32>& getSize() const = 0;
	virtual E_DRIVER_TYPE getDriverType() const = 0;
	const core::stringc& getName() const { return Name; }

ITimer.h
Changed signature (made const)
	virtual u32 getRealTime() const = 0;
	virtual u32 getTime() const = 0;
	virtual f32 getSpeed() const = 0;
	virtual bool isStopped() const = 0;

ITriangleSelector.h
Changed signature (made const)
 	virtual void getTriangles(core::triangle3df* triangles, s32 arraySize,
		s32& outTriangleCount, const core::matrix4* transform=0) const = 0;
 	virtual void getTriangles(core::triangle3df* triangles, s32 arraySize,
 		s32& outTriangleCount, const core::aabbox3d<f32>& box, 
		const core::matrix4* transform=0) const = 0;
 	virtual void getTriangles(core::triangle3df* triangles, s32 arraySize,
 		s32& outTriangleCount, const core::line3d<f32>& line, 
		const core::matrix4* transform=0) const = 0;

IVideoDriver.h
Changed signature (made const, changed param type)
	virtual u32 getTextureCount() const = 0;
Changed signature (made const param) in all draw2DImage methods
	virtual void draw2DImage(const video::ITexture* texture,
Changed signature (made const-ref param, made const)
	virtual const core::dimension2d<s32>& getScreenSize() const = 0;
	virtual const core::dimension2d<s32>& getCurrentRenderTargetSize() const = 0;
Changed signature (made const)
	virtual bool queryFeature(E_VIDEO_DRIVER_FEATURE feature) const = 0;
	virtual const core::matrix4& getTransform(E_TRANSFORMATION_STATE state) const = 0;
	virtual ITexture* createRenderTargetTexture(const core::dimension2d<s32>& size, const c8* name = 0) = 0;
	virtual void makeColorKeyTexture(video::ITexture* texture, video::SColor color) const = 0;
	virtual void makeColorKeyTexture(video::ITexture* texture,
		core::position2d<s32> colorKeyPixelPos) const = 0;
	virtual void makeNormalMapTexture(video::ITexture* texture, f32 amplitude=1.0f) const = 0;
	virtual s32 getFPS() const = 0;
	virtual u32 getPrimitiveCountDrawn( u32 param = 0 ) const = 0;
	virtual u32 getMaximalDynamicLightAmount() const = 0;
	virtual u32 getDynamicLightCount() const = 0;
	virtual const SLight& getDynamicLight(u32 idx) const = 0;
	virtual const wchar_t* getName() const = 0;
	virtual u32 getMaximalPrimitiveCount() const = 0;
	virtual bool getTextureCreationFlag(E_TEXTURE_CREATION_FLAG flag) const = 0;
	virtual u32 getMaterialRendererCount() const = 0;
	virtual const c8* getMaterialRendererName(u32 idx) const = 0;
	virtual E_DRIVER_TYPE getDriverType() const = 0;

IWriteFile.h
Changed signature (changed param type)
	virtual s32 write(const void* buffer, u32 sizeToWrite) = 0;
	virtual bool seek(long finalPos, bool relativeMovement = false) = 0;
Changed signature (changed param type, made const)
	virtual long getPos() const = 0;
Changed signature (made const)
	virtual const c8* getFileName() const = 0;

line2d.h
Changed signature (made const)
	vector2d<T> getUnitVector() const
	f64 getAngleWith(const line2d<T>& l) const
	T getPointOrientation(const vector2d<T>& point) const
	bool isPointOnLine(const vector2d<T>& point) const

matrix4.h
Changed signature (made template param)
	void setTranslation( const vector3d<T>& translation );
	vector3d<T> getTranslation() const;
	void setInverseTranslation( const vector3d<T>& translation );
	inline void setRotationRadians( const vector3d<T>& rotation );
	void setRotationDegrees( const vector3d<T>& rotation );
	core::vector3d<T> getRotationDegrees() const;
	inline void setInverseRotationRadians( const vector3d<T>& rotation );
	void setInverseRotationDegrees( const vector3d<T>& rotation );
	void setScale( const vector3d<T>& scale );
	core::vector3d<T> getScale() const;

rect.h
Changed signature (made non-const ref param, C++ conformance)
	rect<T>& operator+=(const position2d<T>& pos)
	rect<T>& operator-=(const position2d<T>& pos)

S3DVertex.h
Changed inheritance (S3DVertex is now base class of other vertex types)
struct S3DVertex2TCoords : public S3DVertex
struct S3DVertexTangents : public S3DVertex

SAnimatedMesh.h
Changed signature (changed param type, made const)
	virtual u32 getFrameCount() const

SColor.h
Changed signature (changed param type)
	inline u32 A1R5G5B5toA8R8G8B8(u16 color)

SLight.h
Removed attribute (use LightSceneNode position instead)
	core::vector3df Position;

SMaterial.h
Changed attribute structure (texture layer properties are now in thenew TextureLayer array). This changes access to Textures, TextureMatrix, TextureWrap, and the filter settings, which are also per-layer now.
	SMaterialLayer TextureLayer[MATERIAL_MAX_TEXTURES];

vector3d.h
Changed signature (made template param)
	bool equals(const vector3d<T>& other, const T tolerance = (T)ROUNDING_ERROR_32 ) const

Changes for Version 1.4.1
-------------------------
Since this version is a backward compatible bugfix release, the API changes are only a few. None of them should result
in uncompilable code. Newly found warnings might point out wrongly used variables, additional casts or type changes in the
app should easily fix that. The only change which might go unnoticed by the compiler, but affect the application is the
changed initialization in SColorf. This was done to synchronize with other constructors from SColorf and SColor, though,
so the expectations are now much better met.
Also, OSX users have to adjust the defines in IrrCompileConfig, as we now also have OSX defines in Irrlicht style. It's now
even possible to build with X11 support under OSX without changes in the device code.

SColor.h
Changed signature (SColorf is now default initialized to alpha=1.0f)
	SColorf(f32 r=0.f, f32 g=0.f, f32 b=0.f, f32 a=1.f) : r(r), g(g), b(b), a(a) {}

IrrCompileConfig.h
Split the OSX define into platform and device (from old MACOSX define)
	_IRR_OSX_PLATFORM_ for Apple systems running OSX
	_IRR_USE_OSX_DEVICE_ for Cocoa native windowing on OSX

ISceneManager.h
Added new overload for getMesh with IReadFile instead of filename.
	virtual IAnimatedMesh* getMesh(io::IReadFile* file) = 0;

irrMath.h
Renamed method setbit
	REALINLINE void setbit_cond ( u32 &state, s32 condition, u32 mask )

ISceneNode.h
Changed signature (because the debug data enum values can be OR'ed to enable multiple debug data types)
	virtual void setDebugDataVisible(s32 state)
	s32 isDebugDataVisible() const
	s32 DebugDataVisible;

matrix4.h
Changed signature (Added return values to some methods)
	inline CMatrix4<T>& setbyproduct(const CMatrix4<T>& other_a,const CMatrix4<T>& other_b );
	CMatrix4<T>& setbyproduct_nocheck(const CMatrix4<T>& other_a,const CMatrix4<T>& other_b );
	inline CMatrix4<T>& makeIdentity();
	CMatrix4<T>& setTranslation( const vector3d<T>& translation );
	CMatrix4<T>& setInverseTranslation( const vector3d<T>& translation );
	inline CMatrix4<T>& setRotationRadians( const vector3d<T>& rotation );
	CMatrix4<T>& setRotationDegrees( const vector3d<T>& rotation );
	inline CMatrix4<T>& setInverseRotationRadians( const vector3d<T>& rotation );
	CMatrix4<T>& setInverseRotationDegrees( const vector3d<T>& rotation );
	CMatrix4<T>& setScale( const vector3d<T>& scale );
	CMatrix4<T>& buildProjectionMatrixPerspectiveFovRH(f32 fieldOfViewRadians, f32 aspectRatio, f32 zNear, f32 zFar);
	CMatrix4<T>& buildProjectionMatrixPerspectiveFovLH(f32 fieldOfViewRadians, f32 aspectRatio, f32 zNear, f32 zFar);
	CMatrix4<T>& buildProjectionMatrixPerspectiveRH(f32 widthOfViewVolume, f32 heightOfViewVolume, f32 zNear, f32 zFar);
	CMatrix4<T>& buildProjectionMatrixPerspectiveLH(f32 widthOfViewVolume, f32 heightOfViewVolume, f32 zNear, f32 zFar);
	CMatrix4<T>& buildProjectionMatrixOrthoLH(f32 widthOfViewVolume, f32 heightOfViewVolume, f32 zNear, f32 zFar);
	CMatrix4<T>& buildProjectionMatrixOrthoRH(f32 widthOfViewVolume, f32 heightOfViewVolume, f32 zNear, f32 zFar);
	CMatrix4<T>& buildCameraLookAtMatrixLH(...)
	CMatrix4<T>& buildCameraLookAtMatrixRH(...)
	CMatrix4<T>& buildShadowMatrix(const core::vector3df& light, core::plane3df plane, f32 point=1.0f);
	CMatrix4<T>& buildNDCToDCMatrix( const core::rect<s32>& area, f32 zScale);
	CMatrix4<T>& setTextureScale( f32 sx, f32 sy );
	CMatrix4<T>& setTextureRotationCenter( f32 radAngle );
	CMatrix4<T>& setTextureScaleCenter( f32 sx, f32 sy );
	CMatrix4<T>& setTextureTranslate( f32 x, f32 y );
	CMatrix4<T>& setM(const T* data);
Added overload (for one scale value for all axes)
	CMatrix4<T>& setScale( const T scale ) { return setScale(core::vector3d<T>(scale,scale,scale)); }

S3DVertex.h
Added operator
	bool operator<(const S3DVertex& other) const
	bool operator<(const S3DVertex2TCoords& other) const
	bool operator<(const S3DVertexTangents& other) const

irrString.h
Changed signature (int->u32, negative length didn't make sense)
	bool equalsn(const string<T>& other, u32 n) const
	bool equalsn(const T* const str, u32 n) const
New overload/missing method (completing the findLast... and find...Char methods)
	s32 findLastChar(const T* const c, u32 count) const
Changed signature (Added return value)
	string<T>& trim()

Changes for Version 1.4.2
-------------------------
This is once more a bugfix release of the 1.4 branch, and hence pretty API-consistent and backward compatible. The major reason to publish this release is the OpenGL bug, which made several OpenGL 2.x drivers run in SW emulation.
However, we also introduced some driver consistency fixes, which might affect your application's behavior. So read through the next points thoroughly.

SceneParameters.h (and general video driver behavior)
The way Irrlicht handles zbuffer writing with transparent materials has changed. This was an issue ever since, because the default behavior in Irrlicht is to disable writing to the z-buffer for all really transparent, i.e. blending materials. This avoids problems with intersecting faces, but can also break renderings. And this is now consistent for both OpenGL and Direct3D.
If transparent materials should use the SMaterial flag for ZWriteEnable just as other material types use the newly introduced attribute scene::ALLOW_ZWRITE_ON_TRANSPARENT like this:
SceneManager->getParameters()->setAttribute(scene::ALLOW_ZWRITE_ON_TRANSPARENT, true);
All transparent materials will henceforth work as specified by the material flag, until the scenemanager attribute is set to false.

SMaterialLayer.h
The texture matrix now uses irrAllocator for memory handling. This shouldn't be noticeable from the user application (besides fixed heap corruptions on Windows machines), but is still mentioned for completeness.

ISceneNode.h
Documentation error. The docs said that children of a scene node are not visible if the node itself is set to visible. This is of course wrong, children inherit non-visibility of the parent and are hence invisible if the parent is. If the parent is visible, the visibility flag of the child determines its status.

SColor.h
Removed methods (use the unsigned versions and cast in your app if necessary)
	inline s32 getRedSigned(u16 color)
	inline s32 getGreenSigned(u16 color)
	inline s32 getBlueSigned(u16 color)

IParticleSystemSceneNode.h
Changed default values (the old direction default was no real direction)
 	virtual IParticleAnimatedMeshSceneNodeEmitter* createAnimatedMeshSceneNodeEmitter(...)
	virtual IParticleCylinderEmitter* createCylinderEmitter(...)
 	virtual IParticleMeshEmitter* createMeshEmitter(...)

IBoneSceneNode.h
Changed signature (Made const)
	virtual E_BONE_SKINNING_SPACE getSkinningSpace() const=0;

IrrlichtDevice.h
Changed signature (Return value bool instead of void). Returns whether the event has been handled somewhere.
	virtual bool postEventFromUser(const SEvent& event) = 0;

